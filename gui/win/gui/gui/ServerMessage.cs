using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace gui
{
    public class ServerMessage
    {

        JObject msgObject = null;
        String serverMessage = null;

        // start of json object
        String messageFull = null;
        String messageExciter = null;
        String messageType = null;
        DateTime time;
        // end of json object

        int messageLaggingTime = 0;


        public ServerMessage(String message)
        {
            this.serverMessage = message;
            Parse();
        }


        public bool isValid()
        {
            return
                messageFull != null && messageExciter != null && messageType != null;
        }


        public String getMessage()
        {
            return messageFull;
        }


        public String getCause()
        {
            return messageExciter;
        }


        public String getLeakType()
        {
            return messageType;
        }


        public DateTime getMessageTime()
        {
            return time;
        }


        // Checks if message was generated by daemon not so long ago
        public bool isActual()
        {
            return messageLaggingTime <= 10;
        }


        public String getDump()
        {
            return serverMessage;
        }


        private bool Parse()
        {
            try
            {
                this.msgObject = JObject.Parse(serverMessage);
            }
            catch (JsonException)
            {
                return false;
            }

            // parsing...
            this.messageFull = msgObject["message_full"].ToString().Trim();
            this.messageExciter = msgObject["message_exciter"].ToString().Trim();
            this.messageType = msgObject["message_type"].ToString().Trim();
            this.time = getMessageBirthTime(msgObject["utc_timestamp"].ToString().Trim());


            return
                this.messageFull.Length > 0 &&
                this.messageExciter.Length > 0 &&
                this.messageType.Length > 0;
        }


        private DateTime getMessageBirthTime(String serverUtcTimestamp)
        {
            long clientTimestamp = (long)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1))).TotalSeconds;
            long serverTimestamp = 0;
            if (serverUtcTimestamp!=null && long.TryParse(serverUtcTimestamp, out serverTimestamp))
            {
                this.messageLaggingTime = (int)(clientTimestamp - serverTimestamp);
                return DateTime.Now.Subtract(new TimeSpan(0, 0, messageLaggingTime)).ToLocalTime();
            }

            // just current time
            return DateTime.Now.ToLocalTime(); 
        }

    }
}
